{"ast":null,"code":"var _jsxFileName = \"/Users/tylergan/Desktop/Visual Studio Code/Personal/JavaScript/React - The Complete Guide/practise-food-order-app/src/components/Layout/HeaderCartButton.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from 'react';\nimport CartContext from '../../store/cart-context';\nimport CartIcon from '../Cart/CartIcon';\nimport styles from './HeaderCartButton.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function HeaderCartButton(props) {\n  _s();\n  const [btnIsHighlighted, setBtnIsHighlighted] = useState(false);\n  const cartCtx = useContext(CartContext);\n  const {\n    items\n  } = cartCtx;\n  const numberOfCartItems = items.reduce((curNumber, item) => {\n    return curNumber + item.amount;\n  }, 0);\n  console.log(items);\n  const btnClasses = `${styles.button} ${btnIsHighlighted ? styles.bump : ''}`;\n  useEffect(() => {\n    if (cartCtx.items.length === 0) {\n      return;\n    }\n    setBtnIsHighlighted(true);\n    const timer = setTimeout(() => {\n      // reset the button animation after 300ms\n      setBtnIsHighlighted(false);\n    }, 200);\n    return () => {\n      // clean up function\n      clearTimeout(timer); // reset the timer if the component is re-rendered\n      // if we spam the add to cart button, the order of the state update is not guaranteed to be in order (since we are using a timing function)\n      // so, sometimes, the button will not be highlighted since the setBtnIsHighlighted(false) is never called and will remain true.\n    };\n  }, [cartCtx.items]);\n  useEffect(() => {\n    // thus, we need to use a second useEffect to reset the button animation; so, if the state remains true, we will reset the animation back to false\n    if (btnIsHighlighted) {\n      const timer = setTimeout(() => {\n        setBtnIsHighlighted(false);\n      }, 200);\n      return () => {\n        clearTimeout(timer);\n      };\n    }\n  }, [btnIsHighlighted]); // thus, spamming the add to cart button will not have any animation issues since we ensure that the state will always be reset to false\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: btnClasses,\n    onClick: props.onShowCart,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: styles.icon,\n      children: /*#__PURE__*/_jsxDEV(CartIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Your Cart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: styles.badge,\n      children: numberOfCartItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}\n_s(HeaderCartButton, \"iDlK47cXE61tsQB6I4Zg+A0EVdo=\");\n_c = HeaderCartButton;\nvar _c;\n$RefreshReg$(_c, \"HeaderCartButton\");","map":{"version":3,"names":["useContext","useEffect","useState","CartContext","CartIcon","styles","HeaderCartButton","props","btnIsHighlighted","setBtnIsHighlighted","cartCtx","items","numberOfCartItems","reduce","curNumber","item","amount","console","log","btnClasses","button","bump","length","timer","setTimeout","clearTimeout","onShowCart","icon","badge"],"sources":["/Users/tylergan/Desktop/Visual Studio Code/Personal/JavaScript/React - The Complete Guide/practise-food-order-app/src/components/Layout/HeaderCartButton.js"],"sourcesContent":["import { useContext, useEffect, useState } from 'react'\nimport CartContext from '../../store/cart-context'\nimport CartIcon from '../Cart/CartIcon'\nimport styles from './HeaderCartButton.module.css'\n\nexport default function HeaderCartButton(props) {\n    const [btnIsHighlighted, setBtnIsHighlighted] = useState(false)\n    const cartCtx = useContext(CartContext)\n    const { items } = cartCtx;\n\n    const numberOfCartItems = items.reduce((curNumber, item) => {\n      return curNumber + item.amount;\n    }, 0);\n\n    console.log(items)\n\n    const btnClasses = `${styles.button} ${btnIsHighlighted ? styles.bump : ''}`\n\n    useEffect(() => {\n        if (cartCtx.items.length === 0) {\n            return\n        }\n        setBtnIsHighlighted(true)\n\n        const timer = setTimeout(() => { // reset the button animation after 300ms\n            setBtnIsHighlighted(false)\n        }, 200)\n\n        return () => { // clean up function\n            clearTimeout(timer) // reset the timer if the component is re-rendered\n            // if we spam the add to cart button, the order of the state update is not guaranteed to be in order (since we are using a timing function)\n            // so, sometimes, the button will not be highlighted since the setBtnIsHighlighted(false) is never called and will remain true.\n        }\n    }, [cartCtx.items])\n\n    useEffect(() => { // thus, we need to use a second useEffect to reset the button animation; so, if the state remains true, we will reset the animation back to false\n        if (btnIsHighlighted) {\n            const timer = setTimeout(() => {\n                setBtnIsHighlighted(false)\n            }, 200)\n            return () => {\n                clearTimeout(timer)\n            }\n        }\n    }, [btnIsHighlighted])  // thus, spamming the add to cart button will not have any animation issues since we ensure that the state will always be reset to false\n\n    return (\n        <button className={btnClasses} onClick={props.onShowCart}>\n            <span className={styles.icon}>\n                <CartIcon />\n            </span>\n            <span>Your Cart</span>\n            <span className={styles.badge}>{numberOfCartItems}</span>\n        </button>\n    );\n}"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,OAAOC,WAAW,MAAM,0BAA0B;AAClD,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,MAAM,MAAM,+BAA+B;AAAA;AAElD,eAAe,SAASC,gBAAgB,CAACC,KAAK,EAAE;EAAA;EAC5C,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC/D,MAAMQ,OAAO,GAAGV,UAAU,CAACG,WAAW,CAAC;EACvC,MAAM;IAAEQ;EAAM,CAAC,GAAGD,OAAO;EAEzB,MAAME,iBAAiB,GAAGD,KAAK,CAACE,MAAM,CAAC,CAACC,SAAS,EAAEC,IAAI,KAAK;IAC1D,OAAOD,SAAS,GAAGC,IAAI,CAACC,MAAM;EAChC,CAAC,EAAE,CAAC,CAAC;EAELC,OAAO,CAACC,GAAG,CAACP,KAAK,CAAC;EAElB,MAAMQ,UAAU,GAAI,GAAEd,MAAM,CAACe,MAAO,IAAGZ,gBAAgB,GAAGH,MAAM,CAACgB,IAAI,GAAG,EAAG,EAAC;EAE5EpB,SAAS,CAAC,MAAM;IACZ,IAAIS,OAAO,CAACC,KAAK,CAACW,MAAM,KAAK,CAAC,EAAE;MAC5B;IACJ;IACAb,mBAAmB,CAAC,IAAI,CAAC;IAEzB,MAAMc,KAAK,GAAGC,UAAU,CAAC,MAAM;MAAE;MAC7Bf,mBAAmB,CAAC,KAAK,CAAC;IAC9B,CAAC,EAAE,GAAG,CAAC;IAEP,OAAO,MAAM;MAAE;MACXgB,YAAY,CAACF,KAAK,CAAC,EAAC;MACpB;MACA;IACJ,CAAC;EACL,CAAC,EAAE,CAACb,OAAO,CAACC,KAAK,CAAC,CAAC;EAEnBV,SAAS,CAAC,MAAM;IAAE;IACd,IAAIO,gBAAgB,EAAE;MAClB,MAAMe,KAAK,GAAGC,UAAU,CAAC,MAAM;QAC3Bf,mBAAmB,CAAC,KAAK,CAAC;MAC9B,CAAC,EAAE,GAAG,CAAC;MACP,OAAO,MAAM;QACTgB,YAAY,CAACF,KAAK,CAAC;MACvB,CAAC;IACL;EACJ,CAAC,EAAE,CAACf,gBAAgB,CAAC,CAAC,EAAE;;EAExB,oBACI;IAAQ,SAAS,EAAEW,UAAW;IAAC,OAAO,EAAEZ,KAAK,CAACmB,UAAW;IAAA,wBACrD;MAAM,SAAS,EAAErB,MAAM,CAACsB,IAAK;MAAA,uBACzB,QAAC,QAAQ;QAAA;QAAA;QAAA;MAAA;IAAG;MAAA;MAAA;MAAA;IAAA,QACT,eACP;MAAA,UAAM;IAAS;MAAA;MAAA;MAAA;IAAA,QAAO,eACtB;MAAM,SAAS,EAAEtB,MAAM,CAACuB,KAAM;MAAA,UAAEhB;IAAiB;MAAA;MAAA;MAAA;IAAA,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACpD;AAEjB;AAAC,GAlDuBN,gBAAgB;AAAA,KAAhBA,gBAAgB;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}